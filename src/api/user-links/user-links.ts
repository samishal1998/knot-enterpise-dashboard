/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * API
 * API DOCS
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  AddLinkDto,
  EditLinkDto,
  UserLinksEnableLinkBody,
  UserLinksDisableLinkBody,
  UserLinksDeleteLinkBody
} from '.././models'


export const userLinksAddLink = (
    uid: string,
    addLinkDto: AddLinkDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/v2/users/${uid}/links`,
      addLinkDto,options
    );
  }



    export type UserLinksAddLinkMutationResult = NonNullable<Awaited<ReturnType<typeof userLinksAddLink>>>
    export type UserLinksAddLinkMutationBody = AddLinkDto
    export type UserLinksAddLinkMutationError = AxiosError<unknown>

    export const useUserLinksAddLink = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinksAddLink>>, TError,{uid: string;data: AddLinkDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinksAddLink>>, {uid: string;data: AddLinkDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userLinksAddLink(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinksAddLink>>, TError, {uid: string;data: AddLinkDto}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinksEditLink = (
    uid: string,
    editLinkDto: EditLinkDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/v2/users/${uid}/links`,
      editLinkDto,options
    );
  }



    export type UserLinksEditLinkMutationResult = NonNullable<Awaited<ReturnType<typeof userLinksEditLink>>>
    export type UserLinksEditLinkMutationBody = EditLinkDto
    export type UserLinksEditLinkMutationError = AxiosError<unknown>

    export const useUserLinksEditLink = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinksEditLink>>, TError,{uid: string;data: EditLinkDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinksEditLink>>, {uid: string;data: EditLinkDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userLinksEditLink(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinksEditLink>>, TError, {uid: string;data: EditLinkDto}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinksEnableLink = (
    uid: string,
    linkId: string,
    userLinksEnableLinkBody: UserLinksEnableLinkBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/v2/users/${uid}/links/${linkId}/enable`,
      userLinksEnableLinkBody,options
    );
  }



    export type UserLinksEnableLinkMutationResult = NonNullable<Awaited<ReturnType<typeof userLinksEnableLink>>>
    export type UserLinksEnableLinkMutationBody = UserLinksEnableLinkBody
    export type UserLinksEnableLinkMutationError = AxiosError<unknown>

    export const useUserLinksEnableLink = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinksEnableLink>>, TError,{uid: string;linkId: string;data: UserLinksEnableLinkBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinksEnableLink>>, {uid: string;linkId: string;data: UserLinksEnableLinkBody}> = (props) => {
          const {uid,linkId,data} = props ?? {};

          return  userLinksEnableLink(uid,linkId,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinksEnableLink>>, TError, {uid: string;linkId: string;data: UserLinksEnableLinkBody}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinksDisableLink = (
    uid: string,
    linkId: string,
    userLinksDisableLinkBody: UserLinksDisableLinkBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/v2/users/${uid}/links/${linkId}/disable`,
      userLinksDisableLinkBody,options
    );
  }



    export type UserLinksDisableLinkMutationResult = NonNullable<Awaited<ReturnType<typeof userLinksDisableLink>>>
    export type UserLinksDisableLinkMutationBody = UserLinksDisableLinkBody
    export type UserLinksDisableLinkMutationError = AxiosError<unknown>

    export const useUserLinksDisableLink = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinksDisableLink>>, TError,{uid: string;linkId: string;data: UserLinksDisableLinkBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinksDisableLink>>, {uid: string;linkId: string;data: UserLinksDisableLinkBody}> = (props) => {
          const {uid,linkId,data} = props ?? {};

          return  userLinksDisableLink(uid,linkId,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinksDisableLink>>, TError, {uid: string;linkId: string;data: UserLinksDisableLinkBody}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinksDeleteLink = (
    uid: string,
    linkId: string,
    userLinksDeleteLinkBody: UserLinksDeleteLinkBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/v2/users/${uid}/links/${linkId}`,{data:
      userLinksDeleteLinkBody, ...options}
    );
  }



    export type UserLinksDeleteLinkMutationResult = NonNullable<Awaited<ReturnType<typeof userLinksDeleteLink>>>
    export type UserLinksDeleteLinkMutationBody = UserLinksDeleteLinkBody
    export type UserLinksDeleteLinkMutationError = AxiosError<unknown>

    export const useUserLinksDeleteLink = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinksDeleteLink>>, TError,{uid: string;linkId: string;data: UserLinksDeleteLinkBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinksDeleteLink>>, {uid: string;linkId: string;data: UserLinksDeleteLinkBody}> = (props) => {
          const {uid,linkId,data} = props ?? {};

          return  userLinksDeleteLink(uid,linkId,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinksDeleteLink>>, TError, {uid: string;linkId: string;data: UserLinksDeleteLinkBody}, TContext>(mutationFn, mutationOptions)
    }
    