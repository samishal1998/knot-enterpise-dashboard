/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * API
 * API DOCS
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  CreateDistributorDto,
  Distributor,
  Product,
  UpdateDistributorDto,
  GenerateExternalQrDto,
  DistributorsConfirmPayment201,
  DistributorsConfirmPaymentBody
} from '.././models'


export const distributorsCreate = (
    createDistributorDto: CreateDistributorDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/distributors`,
      createDistributorDto,options
    );
  }



    export type DistributorsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof distributorsCreate>>>
    export type DistributorsCreateMutationBody = CreateDistributorDto
    export type DistributorsCreateMutationError = AxiosError<unknown>

    export const useDistributorsCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof distributorsCreate>>, TError,{data: CreateDistributorDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof distributorsCreate>>, {data: CreateDistributorDto}> = (props) => {
          const {data} = props ?? {};

          return  distributorsCreate(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof distributorsCreate>>, TError, {data: CreateDistributorDto}, TContext>(mutationFn, mutationOptions)
    }
    export const distributorsFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Distributor[]>> => {
    return axios.get(
      `/distributors`,options
    );
  }


export const getDistributorsFindAllQueryKey = () => [`/distributors`];

    
export type DistributorsFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof distributorsFindAll>>>
export type DistributorsFindAllQueryError = AxiosError<unknown>

export const useDistributorsFindAll = <TData = Awaited<ReturnType<typeof distributorsFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof distributorsFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDistributorsFindAllQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof distributorsFindAll>>> = ({ signal }) => distributorsFindAll({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof distributorsFindAll>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const distributorsGetMe = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Distributor>> => {
    return axios.get(
      `/distributors/me`,options
    );
  }


export const getDistributorsGetMeQueryKey = () => [`/distributors/me`];

    
export type DistributorsGetMeQueryResult = NonNullable<Awaited<ReturnType<typeof distributorsGetMe>>>
export type DistributorsGetMeQueryError = AxiosError<unknown>

export const useDistributorsGetMe = <TData = Awaited<ReturnType<typeof distributorsGetMe>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof distributorsGetMe>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDistributorsGetMeQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof distributorsGetMe>>> = ({ signal }) => distributorsGetMe({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof distributorsGetMe>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const distributorsFindAllProductsByAllDistributors = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Product[]>> => {
    return axios.get(
      `/distributors/products`,options
    );
  }


export const getDistributorsFindAllProductsByAllDistributorsQueryKey = () => [`/distributors/products`];

    
export type DistributorsFindAllProductsByAllDistributorsQueryResult = NonNullable<Awaited<ReturnType<typeof distributorsFindAllProductsByAllDistributors>>>
export type DistributorsFindAllProductsByAllDistributorsQueryError = AxiosError<unknown>

export const useDistributorsFindAllProductsByAllDistributors = <TData = Awaited<ReturnType<typeof distributorsFindAllProductsByAllDistributors>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof distributorsFindAllProductsByAllDistributors>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDistributorsFindAllProductsByAllDistributorsQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof distributorsFindAllProductsByAllDistributors>>> = ({ signal }) => distributorsFindAllProductsByAllDistributors({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof distributorsFindAllProductsByAllDistributors>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const distributorsFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Distributor>> => {
    return axios.get(
      `/distributors/${id}`,options
    );
  }


export const getDistributorsFindOneQueryKey = (id: string,) => [`/distributors/${id}`];

    
export type DistributorsFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof distributorsFindOne>>>
export type DistributorsFindOneQueryError = AxiosError<unknown>

export const useDistributorsFindOne = <TData = Awaited<ReturnType<typeof distributorsFindOne>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof distributorsFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDistributorsFindOneQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof distributorsFindOne>>> = ({ signal }) => distributorsFindOne(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof distributorsFindOne>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const distributorsUpdate = (
    id: string,
    updateDistributorDto: UpdateDistributorDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Product>> => {
    return axios.patch(
      `/distributors/${id}`,
      updateDistributorDto,options
    );
  }



    export type DistributorsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof distributorsUpdate>>>
    export type DistributorsUpdateMutationBody = UpdateDistributorDto
    export type DistributorsUpdateMutationError = AxiosError<unknown>

    export const useDistributorsUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof distributorsUpdate>>, TError,{id: string;data: UpdateDistributorDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof distributorsUpdate>>, {id: string;data: UpdateDistributorDto}> = (props) => {
          const {id,data} = props ?? {};

          return  distributorsUpdate(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof distributorsUpdate>>, TError, {id: string;data: UpdateDistributorDto}, TContext>(mutationFn, mutationOptions)
    }
    export const distributorsGetGeneratedProducts = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Product[]>> => {
    return axios.get(
      `/distributors/${id}/products`,options
    );
  }


export const getDistributorsGetGeneratedProductsQueryKey = (id: string,) => [`/distributors/${id}/products`];

    
export type DistributorsGetGeneratedProductsQueryResult = NonNullable<Awaited<ReturnType<typeof distributorsGetGeneratedProducts>>>
export type DistributorsGetGeneratedProductsQueryError = AxiosError<unknown>

export const useDistributorsGetGeneratedProducts = <TData = Awaited<ReturnType<typeof distributorsGetGeneratedProducts>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof distributorsGetGeneratedProducts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDistributorsGetGeneratedProductsQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof distributorsGetGeneratedProducts>>> = ({ signal }) => distributorsGetGeneratedProducts(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof distributorsGetGeneratedProducts>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const distributorsGenerateQrForExternalProduct = (
    id: string,
    generateExternalQrDto: GenerateExternalQrDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Product>> => {
    return axios.post(
      `/distributors/${id}/products/external`,
      generateExternalQrDto,options
    );
  }



    export type DistributorsGenerateQrForExternalProductMutationResult = NonNullable<Awaited<ReturnType<typeof distributorsGenerateQrForExternalProduct>>>
    export type DistributorsGenerateQrForExternalProductMutationBody = GenerateExternalQrDto
    export type DistributorsGenerateQrForExternalProductMutationError = AxiosError<unknown>

    export const useDistributorsGenerateQrForExternalProduct = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof distributorsGenerateQrForExternalProduct>>, TError,{id: string;data: GenerateExternalQrDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof distributorsGenerateQrForExternalProduct>>, {id: string;data: GenerateExternalQrDto}> = (props) => {
          const {id,data} = props ?? {};

          return  distributorsGenerateQrForExternalProduct(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof distributorsGenerateQrForExternalProduct>>, TError, {id: string;data: GenerateExternalQrDto}, TContext>(mutationFn, mutationOptions)
    }
    export const distributorsGenerateQrForExistingProduct = (
    id: string,
    productSerial: string,
    generateExternalQrDto: GenerateExternalQrDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/distributors/${id}/products/${productSerial}/qr`,
      generateExternalQrDto,options
    );
  }



    export type DistributorsGenerateQrForExistingProductMutationResult = NonNullable<Awaited<ReturnType<typeof distributorsGenerateQrForExistingProduct>>>
    export type DistributorsGenerateQrForExistingProductMutationBody = GenerateExternalQrDto
    export type DistributorsGenerateQrForExistingProductMutationError = AxiosError<unknown>

    export const useDistributorsGenerateQrForExistingProduct = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof distributorsGenerateQrForExistingProduct>>, TError,{id: string;productSerial: string;data: GenerateExternalQrDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof distributorsGenerateQrForExistingProduct>>, {id: string;productSerial: string;data: GenerateExternalQrDto}> = (props) => {
          const {id,productSerial,data} = props ?? {};

          return  distributorsGenerateQrForExistingProduct(id,productSerial,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof distributorsGenerateQrForExistingProduct>>, TError, {id: string;productSerial: string;data: GenerateExternalQrDto}, TContext>(mutationFn, mutationOptions)
    }
    export const distributorsPayProduct = (
    id: string,
    productId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/distributors/${id}/products/${productId}/pay`,undefined,options
    );
  }



    export type DistributorsPayProductMutationResult = NonNullable<Awaited<ReturnType<typeof distributorsPayProduct>>>
    
    export type DistributorsPayProductMutationError = AxiosError<unknown>

    export const useDistributorsPayProduct = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof distributorsPayProduct>>, TError,{id: string;productId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof distributorsPayProduct>>, {id: string;productId: string}> = (props) => {
          const {id,productId} = props ?? {};

          return  distributorsPayProduct(id,productId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof distributorsPayProduct>>, TError, {id: string;productId: string}, TContext>(mutationFn, mutationOptions)
    }
    export const distributorsConfirmPaymentWebhook = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/distributors/confirm-payment-webhook`,undefined,options
    );
  }



    export type DistributorsConfirmPaymentWebhookMutationResult = NonNullable<Awaited<ReturnType<typeof distributorsConfirmPaymentWebhook>>>
    
    export type DistributorsConfirmPaymentWebhookMutationError = AxiosError<unknown>

    export const useDistributorsConfirmPaymentWebhook = <TError = AxiosError<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof distributorsConfirmPaymentWebhook>>, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof distributorsConfirmPaymentWebhook>>, TVariables> = () => {
          

          return  distributorsConfirmPaymentWebhook(axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof distributorsConfirmPaymentWebhook>>, TError, TVariables, TContext>(mutationFn, mutationOptions)
    }
    export const distributorsConfirmPayment = (
    distributorsConfirmPaymentBody: DistributorsConfirmPaymentBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DistributorsConfirmPayment201>> => {
    return axios.post(
      `/distributors/confirm-payment`,
      distributorsConfirmPaymentBody,options
    );
  }



    export type DistributorsConfirmPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof distributorsConfirmPayment>>>
    export type DistributorsConfirmPaymentMutationBody = DistributorsConfirmPaymentBody
    export type DistributorsConfirmPaymentMutationError = AxiosError<unknown>

    export const useDistributorsConfirmPayment = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof distributorsConfirmPayment>>, TError,{data: DistributorsConfirmPaymentBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof distributorsConfirmPayment>>, {data: DistributorsConfirmPaymentBody}> = (props) => {
          const {data} = props ?? {};

          return  distributorsConfirmPayment(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof distributorsConfirmPayment>>, TError, {data: DistributorsConfirmPaymentBody}, TContext>(mutationFn, mutationOptions)
    }
    export const distributorsRenewSubscription = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/distributors/${id}/subscription/renew`,undefined,options
    );
  }



    export type DistributorsRenewSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof distributorsRenewSubscription>>>
    
    export type DistributorsRenewSubscriptionMutationError = AxiosError<unknown>

    export const useDistributorsRenewSubscription = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof distributorsRenewSubscription>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof distributorsRenewSubscription>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  distributorsRenewSubscription(id,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof distributorsRenewSubscription>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    