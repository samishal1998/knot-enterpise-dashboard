/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * API
 * API DOCS
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  AddCustomAppDto,
  EditCustomAppDto,
  AddCustomAppsCategoryDto,
  EditCustomAppsCategoryDto,
  AddAppDto
} from '.././models'


export const userAppsAddCustomApp = (
    uid: string,
    addCustomAppDto: AddCustomAppDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/users/${uid}/apps/custom/app`,
      addCustomAppDto,options
    );
  }



    export type UserAppsAddCustomAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsAddCustomApp>>>
    export type UserAppsAddCustomAppMutationBody = AddCustomAppDto
    export type UserAppsAddCustomAppMutationError = AxiosError<unknown>

    export const useUserAppsAddCustomApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsAddCustomApp>>, TError,{uid: string;data: AddCustomAppDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsAddCustomApp>>, {uid: string;data: AddCustomAppDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userAppsAddCustomApp(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsAddCustomApp>>, TError, {uid: string;data: AddCustomAppDto}, TContext>(mutationFn, mutationOptions)
    }
    export const userAppsEditCustomApp = (
    uid: string,
    editCustomAppDto: EditCustomAppDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/users/${uid}/apps/custom/app`,
      editCustomAppDto,options
    );
  }



    export type UserAppsEditCustomAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsEditCustomApp>>>
    export type UserAppsEditCustomAppMutationBody = EditCustomAppDto
    export type UserAppsEditCustomAppMutationError = AxiosError<unknown>

    export const useUserAppsEditCustomApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsEditCustomApp>>, TError,{uid: string;data: EditCustomAppDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsEditCustomApp>>, {uid: string;data: EditCustomAppDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userAppsEditCustomApp(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsEditCustomApp>>, TError, {uid: string;data: EditCustomAppDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userAppsEnableCustomApp = (
    uid: string,
    categoryId: string,
    appId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/apps/custom/${categoryId}/app/${appId}/enable`,undefined,options
    );
  }



    export type UserAppsEnableCustomAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsEnableCustomApp>>>
    
    export type UserAppsEnableCustomAppMutationError = AxiosError<unknown>

    export const useUserAppsEnableCustomApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsEnableCustomApp>>, TError,{uid: string;categoryId: string;appId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsEnableCustomApp>>, {uid: string;categoryId: string;appId: string}> = (props) => {
          const {uid,categoryId,appId} = props ?? {};

          return  userAppsEnableCustomApp(uid,categoryId,appId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsEnableCustomApp>>, TError, {uid: string;categoryId: string;appId: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userAppsDisableCustomApp = (
    uid: string,
    categoryId: string,
    appId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/apps/custom/${categoryId}/app/${appId}/disable`,undefined,options
    );
  }



    export type UserAppsDisableCustomAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsDisableCustomApp>>>
    
    export type UserAppsDisableCustomAppMutationError = AxiosError<unknown>

    export const useUserAppsDisableCustomApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsDisableCustomApp>>, TError,{uid: string;categoryId: string;appId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsDisableCustomApp>>, {uid: string;categoryId: string;appId: string}> = (props) => {
          const {uid,categoryId,appId} = props ?? {};

          return  userAppsDisableCustomApp(uid,categoryId,appId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsDisableCustomApp>>, TError, {uid: string;categoryId: string;appId: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userAppsDeleteCustomApp = (
    uid: string,
    categoryId: string,
    appId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/users/${uid}/apps/custom/${categoryId}/app/${appId}`,options
    );
  }



    export type UserAppsDeleteCustomAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsDeleteCustomApp>>>
    
    export type UserAppsDeleteCustomAppMutationError = AxiosError<unknown>

    export const useUserAppsDeleteCustomApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsDeleteCustomApp>>, TError,{uid: string;categoryId: string;appId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsDeleteCustomApp>>, {uid: string;categoryId: string;appId: string}> = (props) => {
          const {uid,categoryId,appId} = props ?? {};

          return  userAppsDeleteCustomApp(uid,categoryId,appId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsDeleteCustomApp>>, TError, {uid: string;categoryId: string;appId: string}, TContext>(mutationFn, mutationOptions)
    }
    export const userAppsAddCustomAppCategory = (
    uid: string,
    addCustomAppsCategoryDto: AddCustomAppsCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/users/${uid}/apps/custom`,
      addCustomAppsCategoryDto,options
    );
  }



    export type UserAppsAddCustomAppCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsAddCustomAppCategory>>>
    export type UserAppsAddCustomAppCategoryMutationBody = AddCustomAppsCategoryDto
    export type UserAppsAddCustomAppCategoryMutationError = AxiosError<unknown>

    export const useUserAppsAddCustomAppCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsAddCustomAppCategory>>, TError,{uid: string;data: AddCustomAppsCategoryDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsAddCustomAppCategory>>, {uid: string;data: AddCustomAppsCategoryDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userAppsAddCustomAppCategory(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsAddCustomAppCategory>>, TError, {uid: string;data: AddCustomAppsCategoryDto}, TContext>(mutationFn, mutationOptions)
    }
    export const userAppsEditCustomAppCategory = (
    uid: string,
    editCustomAppsCategoryDto: EditCustomAppsCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/users/${uid}/apps/custom`,
      editCustomAppsCategoryDto,options
    );
  }



    export type UserAppsEditCustomAppCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsEditCustomAppCategory>>>
    export type UserAppsEditCustomAppCategoryMutationBody = EditCustomAppsCategoryDto
    export type UserAppsEditCustomAppCategoryMutationError = AxiosError<unknown>

    export const useUserAppsEditCustomAppCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsEditCustomAppCategory>>, TError,{uid: string;data: EditCustomAppsCategoryDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsEditCustomAppCategory>>, {uid: string;data: EditCustomAppsCategoryDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userAppsEditCustomAppCategory(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsEditCustomAppCategory>>, TError, {uid: string;data: EditCustomAppsCategoryDto}, TContext>(mutationFn, mutationOptions)
    }
    export const userAppsDisableCustomAppCategory = (
    uid: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/apps/custom/${categoryId}/disable`,undefined,options
    );
  }



    export type UserAppsDisableCustomAppCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsDisableCustomAppCategory>>>
    
    export type UserAppsDisableCustomAppCategoryMutationError = AxiosError<unknown>

    export const useUserAppsDisableCustomAppCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsDisableCustomAppCategory>>, TError,{uid: string;categoryId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsDisableCustomAppCategory>>, {uid: string;categoryId: string}> = (props) => {
          const {uid,categoryId} = props ?? {};

          return  userAppsDisableCustomAppCategory(uid,categoryId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsDisableCustomAppCategory>>, TError, {uid: string;categoryId: string}, TContext>(mutationFn, mutationOptions)
    }
    export const userAppsEnableCustomAppCategory = (
    uid: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/apps/custom/${categoryId}/enable`,undefined,options
    );
  }



    export type UserAppsEnableCustomAppCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsEnableCustomAppCategory>>>
    
    export type UserAppsEnableCustomAppCategoryMutationError = AxiosError<unknown>

    export const useUserAppsEnableCustomAppCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsEnableCustomAppCategory>>, TError,{uid: string;categoryId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsEnableCustomAppCategory>>, {uid: string;categoryId: string}> = (props) => {
          const {uid,categoryId} = props ?? {};

          return  userAppsEnableCustomAppCategory(uid,categoryId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsEnableCustomAppCategory>>, TError, {uid: string;categoryId: string}, TContext>(mutationFn, mutationOptions)
    }
    export const userAppsDeleteCustomAppCategory = (
    uid: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/users/${uid}/apps/custom/${categoryId}`,options
    );
  }



    export type UserAppsDeleteCustomAppCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsDeleteCustomAppCategory>>>
    
    export type UserAppsDeleteCustomAppCategoryMutationError = AxiosError<unknown>

    export const useUserAppsDeleteCustomAppCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsDeleteCustomAppCategory>>, TError,{uid: string;categoryId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsDeleteCustomAppCategory>>, {uid: string;categoryId: string}> = (props) => {
          const {uid,categoryId} = props ?? {};

          return  userAppsDeleteCustomAppCategory(uid,categoryId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsDeleteCustomAppCategory>>, TError, {uid: string;categoryId: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userAppsAddAppOld = (
    uid: string,
    app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM',
    addAppDto: AddAppDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/apps/${app}/add`,
      addAppDto,options
    );
  }



    export type UserAppsAddAppOldMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsAddAppOld>>>
    export type UserAppsAddAppOldMutationBody = AddAppDto
    export type UserAppsAddAppOldMutationError = AxiosError<unknown>

    export const useUserAppsAddAppOld = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsAddAppOld>>, TError,{uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM';data: AddAppDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsAddAppOld>>, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM';data: AddAppDto}> = (props) => {
          const {uid,app,data} = props ?? {};

          return  userAppsAddAppOld(uid,app,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsAddAppOld>>, TError, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM';data: AddAppDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userAppsAddApp = (
    uid: string,
    app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM',
    addAppDto: AddAppDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/users/${uid}/apps/${app}`,
      addAppDto,options
    );
  }



    export type UserAppsAddAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsAddApp>>>
    export type UserAppsAddAppMutationBody = AddAppDto
    export type UserAppsAddAppMutationError = AxiosError<unknown>

    export const useUserAppsAddApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsAddApp>>, TError,{uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM';data: AddAppDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsAddApp>>, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM';data: AddAppDto}> = (props) => {
          const {uid,app,data} = props ?? {};

          return  userAppsAddApp(uid,app,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsAddApp>>, TError, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM';data: AddAppDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userAppsDeleteApp = (
    uid: string,
    app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM', options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/users/${uid}/apps/${app}`,options
    );
  }



    export type UserAppsDeleteAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsDeleteApp>>>
    
    export type UserAppsDeleteAppMutationError = AxiosError<unknown>

    export const useUserAppsDeleteApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsDeleteApp>>, TError,{uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsDeleteApp>>, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}> = (props) => {
          const {uid,app} = props ?? {};

          return  userAppsDeleteApp(uid,app,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsDeleteApp>>, TError, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userAppsEnableApp = (
    uid: string,
    app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM', options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/apps/${app}/enable`,undefined,options
    );
  }



    export type UserAppsEnableAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsEnableApp>>>
    
    export type UserAppsEnableAppMutationError = AxiosError<unknown>

    export const useUserAppsEnableApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsEnableApp>>, TError,{uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsEnableApp>>, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}> = (props) => {
          const {uid,app} = props ?? {};

          return  userAppsEnableApp(uid,app,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsEnableApp>>, TError, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userAppsDisableApp = (
    uid: string,
    app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM', options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/apps/${app}/disable`,undefined,options
    );
  }



    export type UserAppsDisableAppMutationResult = NonNullable<Awaited<ReturnType<typeof userAppsDisableApp>>>
    
    export type UserAppsDisableAppMutationError = AxiosError<unknown>

    export const useUserAppsDisableApp = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAppsDisableApp>>, TError,{uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAppsDisableApp>>, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}> = (props) => {
          const {uid,app} = props ?? {};

          return  userAppsDisableApp(uid,app,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userAppsDisableApp>>, TError, {uid: string;app: 'FACEBOOK' | 'WHATSAPP' | 'TWITTER' | 'INSTAGRAM' | 'TIKTOK' | 'SNAPCHAT' | 'AMAZON' | 'SPOTIFY' | 'YOUTUBE' | 'LINKEDIN' | 'SOUNDCLOUD' | 'PAYPAL' | 'CUSTOM'}, TContext>(mutationFn, mutationOptions)
    }
    