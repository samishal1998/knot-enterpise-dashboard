/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * API
 * API DOCS
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  Event,
  CreateEventDto,
  FindAllEventsDto
} from '.././models'


export const eventsCreate = (
    createEventDto: CreateEventDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.post(
      `/events`,
      createEventDto,options
    );
  }



    export type EventsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof eventsCreate>>>
    export type EventsCreateMutationBody = CreateEventDto
    export type EventsCreateMutationError = AxiosError<Event>

    export const useEventsCreate = <TError = AxiosError<Event>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventsCreate>>, TError,{data: CreateEventDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventsCreate>>, {data: CreateEventDto}> = (props) => {
          const {data} = props ?? {};

          return  eventsCreate(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof eventsCreate>>, TError, {data: CreateEventDto}, TContext>(mutationFn, mutationOptions)
    }
    export const eventsFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.get(
      `/events`,options
    );
  }


export const getEventsFindAllQueryKey = () => [`/events`];

    
export type EventsFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof eventsFindAll>>>
export type EventsFindAllQueryError = AxiosError<Event[]>

export const useEventsFindAll = <TData = Awaited<ReturnType<typeof eventsFindAll>>, TError = AxiosError<Event[]>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof eventsFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEventsFindAllQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsFindAll>>> = ({ signal }) => eventsFindAll({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof eventsFindAll>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const eventsFindAllFiltered = (
    findAllEventsDto: FindAllEventsDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.post(
      `/events/query`,
      findAllEventsDto,options
    );
  }



    export type EventsFindAllFilteredMutationResult = NonNullable<Awaited<ReturnType<typeof eventsFindAllFiltered>>>
    export type EventsFindAllFilteredMutationBody = FindAllEventsDto
    export type EventsFindAllFilteredMutationError = AxiosError<Event[]>

    export const useEventsFindAllFiltered = <TError = AxiosError<Event[]>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventsFindAllFiltered>>, TError,{data: FindAllEventsDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventsFindAllFiltered>>, {data: FindAllEventsDto}> = (props) => {
          const {data} = props ?? {};

          return  eventsFindAllFiltered(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof eventsFindAllFiltered>>, TError, {data: FindAllEventsDto}, TContext>(mutationFn, mutationOptions)
    }
    export const eventsFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.get(
      `/events/${id}`,options
    );
  }


export const getEventsFindOneQueryKey = (id: string,) => [`/events/${id}`];

    
export type EventsFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof eventsFindOne>>>
export type EventsFindOneQueryError = AxiosError<Event>

export const useEventsFindOne = <TData = Awaited<ReturnType<typeof eventsFindOne>>, TError = AxiosError<Event>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof eventsFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEventsFindOneQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsFindOne>>> = ({ signal }) => eventsFindOne(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof eventsFindOne>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const eventsRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.delete(
      `/events/${id}`,options
    );
  }



    export type EventsRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof eventsRemove>>>
    
    export type EventsRemoveMutationError = AxiosError<Event>

    export const useEventsRemove = <TError = AxiosError<Event>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventsRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventsRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  eventsRemove(id,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof eventsRemove>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    