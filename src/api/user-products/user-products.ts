/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * API
 * API DOCS
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  Product,
  LinkProductDto
} from '.././models'


export const userProductsLinkProduct = (
    uid: string,
    linkProductDto: LinkProductDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.patch(
      `/users/${uid}/products/link`,
      linkProductDto,options
    );
  }



    export type UserProductsLinkProductMutationResult = NonNullable<Awaited<ReturnType<typeof userProductsLinkProduct>>>
    export type UserProductsLinkProductMutationBody = LinkProductDto
    export type UserProductsLinkProductMutationError = AxiosError<Product>

    export const useUserProductsLinkProduct = <TError = AxiosError<Product>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userProductsLinkProduct>>, TError,{uid: string;data: LinkProductDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userProductsLinkProduct>>, {uid: string;data: LinkProductDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userProductsLinkProduct(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userProductsLinkProduct>>, TError, {uid: string;data: LinkProductDto}, TContext>(mutationFn, mutationOptions)
    }
    export const userProductsUnlinkProduct = (
    uid: string,
    linkProductDto: LinkProductDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/products/unlink`,
      linkProductDto,options
    );
  }



    export type UserProductsUnlinkProductMutationResult = NonNullable<Awaited<ReturnType<typeof userProductsUnlinkProduct>>>
    export type UserProductsUnlinkProductMutationBody = LinkProductDto
    export type UserProductsUnlinkProductMutationError = AxiosError<unknown>

    export const useUserProductsUnlinkProduct = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userProductsUnlinkProduct>>, TError,{uid: string;data: LinkProductDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userProductsUnlinkProduct>>, {uid: string;data: LinkProductDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userProductsUnlinkProduct(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userProductsUnlinkProduct>>, TError, {uid: string;data: LinkProductDto}, TContext>(mutationFn, mutationOptions)
    }
    