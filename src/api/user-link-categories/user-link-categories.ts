/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * API
 * API DOCS
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  AddLinksCategoryDto,
  EditCustomAppsCategoryDto,
  EditLinksCategoryDto,
  UserLinkCategoriesReorderLinksCategoryBody
} from '.././models'


export const userLinkCategoriesAddLinksCategory = (
    uid: string,
    addLinksCategoryDto: AddLinksCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/users/${uid}/link-categories`,
      addLinksCategoryDto,options
    );
  }



    export type UserLinkCategoriesAddLinksCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userLinkCategoriesAddLinksCategory>>>
    export type UserLinkCategoriesAddLinksCategoryMutationBody = AddLinksCategoryDto
    export type UserLinkCategoriesAddLinksCategoryMutationError = AxiosError<unknown>

    export const useUserLinkCategoriesAddLinksCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinkCategoriesAddLinksCategory>>, TError,{uid: string;data: AddLinksCategoryDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinkCategoriesAddLinksCategory>>, {uid: string;data: AddLinksCategoryDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userLinkCategoriesAddLinksCategory(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinkCategoriesAddLinksCategory>>, TError, {uid: string;data: AddLinksCategoryDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @deprecated
 */
export const userLinkCategoriesEditLinksCategoryV1 = (
    uid: string,
    editCustomAppsCategoryDto: EditCustomAppsCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/users/${uid}/link-categories`,
      editCustomAppsCategoryDto,options
    );
  }



    export type UserLinkCategoriesEditLinksCategoryV1MutationResult = NonNullable<Awaited<ReturnType<typeof userLinkCategoriesEditLinksCategoryV1>>>
    export type UserLinkCategoriesEditLinksCategoryV1MutationBody = EditCustomAppsCategoryDto
    export type UserLinkCategoriesEditLinksCategoryV1MutationError = AxiosError<unknown>

    export const useUserLinkCategoriesEditLinksCategoryV1 = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinkCategoriesEditLinksCategoryV1>>, TError,{uid: string;data: EditCustomAppsCategoryDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinkCategoriesEditLinksCategoryV1>>, {uid: string;data: EditCustomAppsCategoryDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  userLinkCategoriesEditLinksCategoryV1(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinkCategoriesEditLinksCategoryV1>>, TError, {uid: string;data: EditCustomAppsCategoryDto}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinkCategoriesEditLinksCategory = (
    uid: string,
    categoryId: string,
    editLinksCategoryDto: EditLinksCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/v2/users/${uid}/link-categories/${categoryId}`,
      editLinksCategoryDto,options
    );
  }



    export type UserLinkCategoriesEditLinksCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userLinkCategoriesEditLinksCategory>>>
    export type UserLinkCategoriesEditLinksCategoryMutationBody = EditLinksCategoryDto
    export type UserLinkCategoriesEditLinksCategoryMutationError = AxiosError<unknown>

    export const useUserLinkCategoriesEditLinksCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinkCategoriesEditLinksCategory>>, TError,{uid: string;categoryId: string;data: EditLinksCategoryDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinkCategoriesEditLinksCategory>>, {uid: string;categoryId: string;data: EditLinksCategoryDto}> = (props) => {
          const {uid,categoryId,data} = props ?? {};

          return  userLinkCategoriesEditLinksCategory(uid,categoryId,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinkCategoriesEditLinksCategory>>, TError, {uid: string;categoryId: string;data: EditLinksCategoryDto}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinkCategoriesDisableLinksCategory = (
    uid: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/link-categories/${categoryId}/disable`,undefined,options
    );
  }



    export type UserLinkCategoriesDisableLinksCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userLinkCategoriesDisableLinksCategory>>>
    
    export type UserLinkCategoriesDisableLinksCategoryMutationError = AxiosError<unknown>

    export const useUserLinkCategoriesDisableLinksCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinkCategoriesDisableLinksCategory>>, TError,{uid: string;categoryId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinkCategoriesDisableLinksCategory>>, {uid: string;categoryId: string}> = (props) => {
          const {uid,categoryId} = props ?? {};

          return  userLinkCategoriesDisableLinksCategory(uid,categoryId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinkCategoriesDisableLinksCategory>>, TError, {uid: string;categoryId: string}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinkCategoriesEnableLinksCategory = (
    uid: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${uid}/link-categories/${categoryId}/enable`,undefined,options
    );
  }



    export type UserLinkCategoriesEnableLinksCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userLinkCategoriesEnableLinksCategory>>>
    
    export type UserLinkCategoriesEnableLinksCategoryMutationError = AxiosError<unknown>

    export const useUserLinkCategoriesEnableLinksCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinkCategoriesEnableLinksCategory>>, TError,{uid: string;categoryId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinkCategoriesEnableLinksCategory>>, {uid: string;categoryId: string}> = (props) => {
          const {uid,categoryId} = props ?? {};

          return  userLinkCategoriesEnableLinksCategory(uid,categoryId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinkCategoriesEnableLinksCategory>>, TError, {uid: string;categoryId: string}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinkCategoriesDeleteLinksCategory = (
    uid: string,
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/users/${uid}/link-categories/${categoryId}`,options
    );
  }



    export type UserLinkCategoriesDeleteLinksCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userLinkCategoriesDeleteLinksCategory>>>
    
    export type UserLinkCategoriesDeleteLinksCategoryMutationError = AxiosError<unknown>

    export const useUserLinkCategoriesDeleteLinksCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinkCategoriesDeleteLinksCategory>>, TError,{uid: string;categoryId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinkCategoriesDeleteLinksCategory>>, {uid: string;categoryId: string}> = (props) => {
          const {uid,categoryId} = props ?? {};

          return  userLinkCategoriesDeleteLinksCategory(uid,categoryId,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinkCategoriesDeleteLinksCategory>>, TError, {uid: string;categoryId: string}, TContext>(mutationFn, mutationOptions)
    }
    export const userLinkCategoriesReorderLinksCategory = (
    uid: string,
    userLinkCategoriesReorderLinksCategoryBody: UserLinkCategoriesReorderLinksCategoryBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/users/${uid}/link-categories/reorder`,
      userLinkCategoriesReorderLinksCategoryBody,options
    );
  }



    export type UserLinkCategoriesReorderLinksCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof userLinkCategoriesReorderLinksCategory>>>
    export type UserLinkCategoriesReorderLinksCategoryMutationBody = UserLinkCategoriesReorderLinksCategoryBody
    export type UserLinkCategoriesReorderLinksCategoryMutationError = AxiosError<unknown>

    export const useUserLinkCategoriesReorderLinksCategory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userLinkCategoriesReorderLinksCategory>>, TError,{uid: string;data: UserLinkCategoriesReorderLinksCategoryBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLinkCategoriesReorderLinksCategory>>, {uid: string;data: UserLinkCategoriesReorderLinksCategoryBody}> = (props) => {
          const {uid,data} = props ?? {};

          return  userLinkCategoriesReorderLinksCategory(uid,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userLinkCategoriesReorderLinksCategory>>, TError, {uid: string;data: UserLinkCategoriesReorderLinksCategoryBody}, TContext>(mutationFn, mutationOptions)
    }
    