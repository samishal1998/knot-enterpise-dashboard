/**
 * @license
 * author: samishal.1998@gmail.com
 * ripple-effect.js v0.0.1
 * Released under the MIT license.
 */
this['ripple-effect'] = (function () {
	'use strict';
	return {
		rippleEffect: function ({
			duration: e = 600,
			rippleColor: t = 'rgba(255, 255, 255, 0.5)',
			center: l = !1,
			ripplesCount: r = 1,
			rippleSeparationTime: i = 100,
			rippleFinalScale: o,
		}) {
			return function (p) {
				console.log({
					duration: e,
					rippleColor: t,
					center: l,
					ripplesCount: r,
					rippleSeparationTime: i,
					rippleFinalScale: o,
				});
				const n = p.currentTarget,
					s = document.createElement('span'),
					a = Math.max(n.clientWidth, n.clientHeight),
					c = a / 2;
				o && 'number' == typeof o && s.style.setProperty('--sm-ripple-final-scale', o.toString()),
					(s.style.width = s.style.height = `${a}px`),
					l
						? ((s.style.left = `calc(50% - ${c}px)`), (s.style.top = `calc(50% - ${c}px)`))
						: ((s.style.left = p.clientX - n.offsetLeft - c + 'px'),
						  (s.style.top = p.clientY - n.offsetTop - c + 'px')),
					(s.style.animation = `sm-ripple ${e}ms linear`),
					'string' == typeof t && (s.style['background-color'] = t),
					s.classList.add('sm-ripple-effect');
				const f = Array.isArray(i)
					? i
					: Array(r)
							.fill(null)
							.map((e, t) => t * i);
				console.log(f);
				for (let l = 0; l < r; l++) {
					const r = s.cloneNode(!0);
					Array.isArray(o) && o?.[l] && r.style.setProperty('--sm-ripple-final-scale', o[l]),
						Array.isArray(o) && t?.[l] && (r.style['background-color'] = t),
						console.log(e + f[l]),
						setTimeout(() => r.remove(), e + f[l]),
						setTimeout(() => n.appendChild(r), f[l]);
				}
			};
		},
	};
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmlwcGxlLWVmZmVjdC5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyIsIi4uL3NyYy9yaXBwbGUtZWZmZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByaXBwbGVFZmZlY3QgZnJvbSAnLi9yaXBwbGUtZWZmZWN0JztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmlwcGxlRWZmZWN0XG59XG5cblxuIiwiXG5leHBvcnQgdHlwZSBSaXBwbGVFZmZlY3RBcmdzID0ge1xuICBkdXJhdGlvbjogbnVtYmVyO1xuICByaXBwbGVDb2xvcjogc3RyaW5nIHwgc3RyaW5nW107XG4gIGNlbnRlcjogYm9vbGVhbjtcbiAgcmlwcGxlc0NvdW50OiBudW1iZXI7XG4gIHJpcHBsZVNlcGFyYXRpb25UaW1lOiBudW1iZXIgfCBudW1iZXJbXTtcbiAgcmlwcGxlRmluYWxTY2FsZTogbnVtYmVyIHwgbnVtYmVyW107XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByaXBwbGVFZmZlY3Qoe1xuICBkdXJhdGlvbiA9IDYwMCxcbiAgcmlwcGxlQ29sb3IgPSBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KVwiLFxuICBjZW50ZXIgPSBmYWxzZSxcbiAgcmlwcGxlc0NvdW50ID0gMSxcbiAgcmlwcGxlU2VwYXJhdGlvblRpbWUgPSAxMDAsXG4gIHJpcHBsZUZpbmFsU2NhbGUsXG59OiBSaXBwbGVFZmZlY3RBcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xuICAgIGNvbnNvbGUubG9nKHtcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgcmlwcGxlQ29sb3IsXG4gICAgICBjZW50ZXIsXG4gICAgICByaXBwbGVzQ291bnQsXG4gICAgICByaXBwbGVTZXBhcmF0aW9uVGltZSxcbiAgICAgIHJpcHBsZUZpbmFsU2NhbGUsXG4gICAgfSlcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuXG4gICAgY29uc3QgY2lyY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY29uc3QgZGlhbWV0ZXIgPSBNYXRoLm1heCh0YXJnZXQuY2xpZW50V2lkdGgsIHRhcmdldC5jbGllbnRIZWlnaHQpO1xuICAgIGNvbnN0IHJhZGl1cyA9IGRpYW1ldGVyIC8gMjtcbiAgICBpZiAocmlwcGxlRmluYWxTY2FsZSAmJiB0eXBlb2YgcmlwcGxlRmluYWxTY2FsZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY2lyY2xlLnN0eWxlLnNldFByb3BlcnR5KFwiLS1zbS1yaXBwbGUtZmluYWwtc2NhbGVcIiwgcmlwcGxlRmluYWxTY2FsZS50b1N0cmluZygpKTtcbiAgICB9XG4gICAgY2lyY2xlLnN0eWxlLndpZHRoID0gY2lyY2xlLnN0eWxlLmhlaWdodCA9IGAke2RpYW1ldGVyfXB4YDtcblxuICAgIGlmICghY2VudGVyKSB7XG4gICAgICBjaXJjbGUuc3R5bGUubGVmdCA9IGAke2V2ZW50LmNsaWVudFggLSB0YXJnZXQub2Zmc2V0TGVmdCAtIHJhZGl1c31weGA7XG4gICAgICBjaXJjbGUuc3R5bGUudG9wID0gYCR7ZXZlbnQuY2xpZW50WSAtIHRhcmdldC5vZmZzZXRUb3AgLSByYWRpdXN9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaXJjbGUuc3R5bGUubGVmdCA9IGBjYWxjKDUwJSAtICR7cmFkaXVzfXB4KWA7XG4gICAgICBjaXJjbGUuc3R5bGUudG9wID0gYGNhbGMoNTAlIC0gJHtyYWRpdXN9cHgpYDtcbiAgICB9XG5cbiAgICBjaXJjbGUuc3R5bGUuYW5pbWF0aW9uID0gYHNtLXJpcHBsZSAke2R1cmF0aW9ufW1zIGxpbmVhcmA7XG4gICAgaWYodHlwZW9mIHJpcHBsZUNvbG9yID09PSAnc3RyaW5nJyApe1xuICAgICAgKGNpcmNsZS5zdHlsZSBhcyBhbnkpW1wiYmFja2dyb3VuZC1jb2xvclwiXSA9IHJpcHBsZUNvbG9yO1xuICAgIH1cblxuICAgIGNpcmNsZS5jbGFzc0xpc3QuYWRkKFwic20tcmlwcGxlLWVmZmVjdFwiKTtcblxuICAgIGNvbnN0IF9yaXBwbGVTZXBhcmF0aW9uVGltZSA9IEFycmF5LmlzQXJyYXkocmlwcGxlU2VwYXJhdGlvblRpbWUpPyByaXBwbGVTZXBhcmF0aW9uVGltZSA6IEFycmF5KHJpcHBsZXNDb3VudCkuZmlsbChudWxsKS5tYXAoKF8saSk9PmkqcmlwcGxlU2VwYXJhdGlvblRpbWUpO1xuXG4gICAgY29uc29sZS5sb2coX3JpcHBsZVNlcGFyYXRpb25UaW1lKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmlwcGxlc0NvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IG5vZGUgOiBhbnk9IGNpcmNsZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyaXBwbGVGaW5hbFNjYWxlKSAmJiByaXBwbGVGaW5hbFNjYWxlPy5baV0pIHtcbiAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tc20tcmlwcGxlLWZpbmFsLXNjYWxlXCIsIHJpcHBsZUZpbmFsU2NhbGVbaV0pO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmlwcGxlRmluYWxTY2FsZSkgJiYgcmlwcGxlQ29sb3I/LltpXSkge1xuICAgICAgICBub2RlLnN0eWxlW1wiYmFja2dyb3VuZC1jb2xvclwiXSA9IHJpcHBsZUNvbG9yO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coZHVyYXRpb24gKyAgX3JpcHBsZVNlcGFyYXRpb25UaW1lW2ldKVxuICAgICAgc2V0VGltZW91dCgoKSA9PiBub2RlLnJlbW92ZSgpLCBkdXJhdGlvbiArICBfcmlwcGxlU2VwYXJhdGlvblRpbWVbaV0pO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSksICBfcmlwcGxlU2VwYXJhdGlvblRpbWVbaV0pO1xuICAgIH1cbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJyaXBwbGVFZmZlY3QiLCJkdXJhdGlvbiIsInJpcHBsZUNvbG9yIiwiY2VudGVyIiwicmlwcGxlc0NvdW50IiwicmlwcGxlU2VwYXJhdGlvblRpbWUiLCJyaXBwbGVGaW5hbFNjYWxlIiwiZXZlbnQiLCJjb25zb2xlIiwibG9nIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsImNpcmNsZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImRpYW1ldGVyIiwiTWF0aCIsIm1heCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwicmFkaXVzIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInRvU3RyaW5nIiwid2lkdGgiLCJoZWlnaHQiLCJsZWZ0IiwidG9wIiwiY2xpZW50WCIsIm9mZnNldExlZnQiLCJjbGllbnRZIiwib2Zmc2V0VG9wIiwiYW5pbWF0aW9uIiwiY2xhc3NMaXN0IiwiYWRkIiwiX3JpcHBsZVNlcGFyYXRpb25UaW1lIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsbCIsIm1hcCIsIl8iLCJpIiwibm9kZSIsImNsb25lTm9kZSIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJhcHBlbmRDaGlsZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O29EQUNlLENBQ2JBLHVCQ1FtQ0MsU0FDbkNBLEVBQVcsSUFBR0MsWUFDZEEsRUFBYywyQkFBMEJDLE9BQ3hDQSxHQUFTLEVBQUtDLGFBQ2RBLEVBQWUsRUFBQ0MscUJBQ2hCQSxFQUF1QixJQUFHQyxpQkFDMUJBLElBRUEsT0FBTyxTQUFVQyxHQUNmQyxRQUFRQyxJQUFJLENBQ1ZSLFNBQUFBLEVBQ0FDLFlBQUFBLEVBQ0FDLE9BQUFBLEVBQ0FDLGFBQUFBLEVBQ0FDLHFCQUFBQSxFQUNBQyxpQkFBQUEsSUFFRixNQUFNSSxFQUFTSCxFQUFNSSxjQUVmQyxFQUFTQyxTQUFTQyxjQUFjLFFBQ2hDQyxFQUFXQyxLQUFLQyxJQUFJUCxFQUFPUSxZQUFhUixFQUFPUyxjQUMvQ0MsRUFBU0wsRUFBVyxFQUN0QlQsR0FBZ0QsaUJBQXJCQSxHQUM3Qk0sRUFBT1MsTUFBTUMsWUFBWSwwQkFBMkJoQixFQUFpQmlCLFlBRXZFWCxFQUFPUyxNQUFNRyxNQUFRWixFQUFPUyxNQUFNSSxPQUFTLEdBQUdWLE1BRXpDWixHQUlIUyxFQUFPUyxNQUFNSyxLQUFPLGNBQWNOLE9BQ2xDUixFQUFPUyxNQUFNTSxJQUFNLGNBQWNQLFNBSmpDUixFQUFPUyxNQUFNSyxLQUFVbkIsRUFBTXFCLFFBQVVsQixFQUFPbUIsV0FBYVQsRUFBdkMsS0FDcEJSLEVBQU9TLE1BQU1NLElBQVNwQixFQUFNdUIsUUFBVXBCLEVBQU9xQixVQUFZWCxFQUF0QyxNQU1yQlIsRUFBT1MsTUFBTVcsVUFBWSxhQUFhL0IsYUFDWixpQkFBaEJDLElBQ1BVLEVBQU9TLE1BQWMsb0JBQXNCbkIsR0FHOUNVLEVBQU9xQixVQUFVQyxJQUFJLG9CQUVyQixNQUFNQyxFQUF3QkMsTUFBTUMsUUFBUWhDLEdBQXVCQSxFQUF1QitCLE1BQU1oQyxHQUFja0MsS0FBSyxNQUFNQyxLQUFJLENBQUNDLEVBQUVDLElBQUlBLEVBQUVwQyxJQUV0SUcsUUFBUUMsSUFBSTBCLEdBQ1osSUFBSyxJQUFJTSxFQUFJLEVBQUdBLEVBQUlyQyxFQUFjcUMsSUFBSyxDQUNyQyxNQUFNQyxFQUFZOUIsRUFBTytCLFdBQVUsR0FDL0JQLE1BQU1DLFFBQVEvQixJQUFxQkEsSUFBbUJtQyxJQUN4REMsRUFBS3JCLE1BQU1DLFlBQVksMEJBQTJCaEIsRUFBaUJtQyxJQUVqRUwsTUFBTUMsUUFBUS9CLElBQXFCSixJQUFjdUMsS0FDbkRDLEVBQUtyQixNQUFNLG9CQUFzQm5CLEdBRW5DTSxRQUFRQyxJQUFJUixFQUFZa0MsRUFBc0JNLElBQzlDRyxZQUFXLElBQU1GLEVBQUtHLFVBQVU1QyxFQUFZa0MsRUFBc0JNLElBQ2xFRyxZQUFXLElBQU1sQyxFQUFPb0MsWUFBWUosSUFBUVAsRUFBc0JNIn0=
